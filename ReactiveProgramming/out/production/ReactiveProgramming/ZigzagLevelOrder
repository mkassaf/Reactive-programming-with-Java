/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 
 /*
 
 Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: [[3],[20,9],[15,7]]
Example 2:

Input: root = [1]
Output: [[1]]
Example 3:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 2000].
-100 <= Node.val <= 100
 
 
 */
 
class  ZigzagLevelOrder {
    public List<List<Integer>> Solution(TreeNode root) {
        if(root == null){
            return new ArrayList();
        }
        List<List<Integer>> result = new ArrayList();
        Stack<TreeNode> nodes = new Stack<>();
        nodes.push(root);
        boolean flag = true;
        while(!nodes.empty()){
            List<Integer> node = new ArrayList();
            Stack<TreeNode> InnerNodes = new Stack<>();
            while(!nodes.empty()){
                TreeNode n = nodes.pop();
                node.add(n.val);
                if(n.left == null && n.right == null){
                    continue;
                }
                if(flag){
                   if(n.left != null){
                        InnerNodes.push(n.left);
                    }    
                    if(n.right != null){
                        InnerNodes.push(n.right);
                    } 
                } else {
                   if(n.right != null){
                        InnerNodes.push(n.right);
                    }
                    if(n.left != null){
                        InnerNodes.push(n.left);
                    } 
                    
                }
            }
            flag = !flag;
            nodes = InnerNodes;
            result.add(node);
        }
       
        return result;
    }
}
